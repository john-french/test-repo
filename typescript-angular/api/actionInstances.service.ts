/**
 * Best Next Action API
 * APIs for Best Next Action capabilities.   Note that the error specification used by this API is based  on the IETF draft: https://tools.ietf.org/html/rfc7807 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { ActionBase } from '../model/actionBase';
import { ActionUpdate } from '../model/actionUpdate';
import { ActionsResponse } from '../model/actionsResponse';
import { BnaAction } from '../model/bnaAction';
import { ErrorResponse } from '../model/errorResponse';
import { NewEntityResponse } from '../model/newEntityResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class ActionInstancesService {

    protected basePath = 'https://virtserver.swaggerhub.com/PitneyBowes-CES/Best_Next_Actions/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieve Actions
     * Returns all Action instances, optionally filtered by Domain or Action Metadata (but not both). Use the offset and limit parameters to retrieve subsets of the available Actions. 
     * @param tenantId Id of the tenant being accessed
     * @param domainId ID of the Domain to which the Actions belong.
     * @param metadataId ID of the Action Metadata to which the Actions must conform.
     * @param detail Level of detail to return for each Action (Summary or Full). Default is Summary.
     * @param query Return only those items whose name, description or tags (if available) contain the search string.
     * @param offset Number of items to skip before returning results. Default is 0.
     * @param limit Maximum number of items to return. 0 means return all items. Default is 20.
     * @param sort How to sort returned collection. Comma-separated list of property names, optionally pre-fixed with sort order of &#39;+&#39; for ascending, or &#39;-&#39; for descending. Default sort order is ascending. Default sort field is name. Field names supplied must match a property (of simple data type at the root) of the returned collection, otherwise no sorting is applied.&lt;p&gt;For example, &#39;sort&#x3D;name,-createdWhen&#39; means sort by name (ascending), then by createdWhen (descending).
     */
    public actionsGet(tenantId: string, domainId?: string, metadataId?: string, detail?: string, query?: string, offset?: number, limit?: number, sort?: string): Observable<ActionsResponse> {
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling actionsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (domainId !== undefined) {
            queryParameters = queryParameters.set('domainId', <any>domainId);
        }
        if (metadataId !== undefined) {
            queryParameters = queryParameters.set('metadataId', <any>metadataId);
        }
        if (detail !== undefined) {
            queryParameters = queryParameters.set('detail', <any>detail);
        }
        if (query !== undefined) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (offset !== undefined) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;
        if (tenantId !== undefined && tenantId !== null) {
            headers = headers.set('TenantId', String(tenantId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/actions`,
            {
                params: queryParameters,
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Delete Action
     * Deletes the Action instance with the specified ID. An error is returned if the Action is in use and cannot be deleted.  
     * @param id ID of the Action instance to be deleted.
     * @param tenantId Id of the tenant being accessed
     */
    public actionsIdDelete(id: string, tenantId: string): Observable<{}> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling actionsIdDelete.');
        }
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling actionsIdDelete.');
        }

        let headers = this.defaultHeaders;
        if (tenantId !== undefined && tenantId !== null) {
            headers = headers.set('TenantId', String(tenantId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/actions/${encodeURIComponent(String(id))}`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Retrieve Action
     * Returns the Action instance with the specified ID.
     * @param id ID of the Action instance to be returned.
     * @param tenantId Id of the tenant being accessed
     */
    public actionsIdGet(id: string, tenantId: string): Observable<BnaAction> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling actionsIdGet.');
        }
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling actionsIdGet.');
        }

        let headers = this.defaultHeaders;
        if (tenantId !== undefined && tenantId !== null) {
            headers = headers.set('TenantId', String(tenantId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/actions/${encodeURIComponent(String(id))}`,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Update Action
     * Replaces the specified Action instance.
     * @param id ID of the Action instance to be updated.
     * @param tenantId Id of the tenant being accessed
     * @param action Action instance with a structure as defined by the Action Metadata.
     */
    public actionsIdPut(id: string, tenantId: string, action?: ActionUpdate): Observable<{}> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling actionsIdPut.');
        }
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling actionsIdPut.');
        }

        let headers = this.defaultHeaders;
        if (tenantId !== undefined && tenantId !== null) {
            headers = headers.set('TenantId', String(tenantId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/actions/${encodeURIComponent(String(id))}`,
            action,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

    /**
     * Create Action
     * Creates a new Action instance. The Action object must contain an actionMetadataId to indicate which Action Metatdata the Action conforms to. 
     * @param tenantId Id of the tenant being accessed
     * @param action Action instance with a structure as defined by the Action Metadata.
     */
    public actionsPost(tenantId: string, action?: ActionBase): Observable<NewEntityResponse> {
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling actionsPost.');
        }

        let headers = this.defaultHeaders;
        if (tenantId !== undefined && tenantId !== null) {
            headers = headers.set('TenantId', String(tenantId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/actions`,
            action,
            {
                headers: headers,
                withCredentials: this.configuration.withCredentials,
            }
        );
    }

}
